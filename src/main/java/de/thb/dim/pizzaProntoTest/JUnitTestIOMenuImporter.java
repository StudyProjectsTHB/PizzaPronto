package de.thb.dim.pizzaProntoTest;import static org.junit.jupiter.api.Assertions.assertEquals;import static org.junit.jupiter.api.Assertions.assertThrows;import static org.junit.jupiter.api.Assertions.assertTrue;import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.FileReader;import java.io.FileWriter;import java.util.ArrayList;import java.util.List;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import org.junit.jupiter.api.Assertions;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Test;import de.thb.dim.pizzaPronto.businessObjects.io.MenuImporter;import de.thb.dim.pizzaPronto.valueObjects.DessertVO;import de.thb.dim.pizzaPronto.valueObjects.DishVO;import de.thb.dim.pizzaPronto.valueObjects.IngredientComponent;import de.thb.dim.pizzaPronto.valueObjects.IngredientComposite;import de.thb.dim.pizzaPronto.valueObjects.IngredientLeaf;import de.thb.dim.pizzaPronto.valueObjects.MenuVO;import de.thb.dim.pizzaPronto.valueObjects.PastaVO;import de.thb.dim.pizzaPronto.valueObjects.PizzaVO;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.io.Writer;import java.nio.charset.StandardCharsets;/** * IO-KLassen werden getestet. *  * Zum Testen werden spezielle Assert-Befehle und die Reflection-API eingesetzt * <br> *  * @author Gabriele Schmidt * @version 1.0 8.05.2015 */public class JUnitTestIOMenuImporter {	private static MenuVO myMenu;	private static MenuVO readMenu;	private static String file = "test/myLittleTestMenu.json";	@BeforeEach	public void initEach() {		MenuWriter menuWriter;		ArrayList<DishVO> dishes = new ArrayList<DishVO>();		ArrayList<IngredientComponent> zutatenMargherita = new ArrayList<IngredientComponent>();		ArrayList<IngredientComponent> zutatenBolognese1 = new ArrayList<IngredientComponent>();		ArrayList<IngredientComponent> zutatenBolognese2 = new ArrayList<IngredientComponent>();		ArrayList<IngredientComponent> zutatenObstsalat = new ArrayList<IngredientComponent>();		IngredientLeaf il;		IngredientComposite ic;		ic = new IngredientComposite("Belag");		il = new IngredientLeaf("Kaese");		ic.add(il);		il = new IngredientLeaf("Basillikum");		il = new IngredientLeaf("Knoblauch");		ic.add(il);		il = new IngredientLeaf("Oel");		ic.add(il);		zutatenMargherita.add(ic);		il = new IngredientLeaf("Tomatensauce", 10f);		zutatenMargherita.add(il);		ic = new IngredientComposite("Teig");		il = new IngredientLeaf("Mehl");		ic.add(il);		il = new IngredientLeaf("Hefe");		ic.add(il);		il = new IngredientLeaf("Salz", 0.01f);		ic.add(il);		il = new IngredientLeaf("Oel");		ic.add(il);		zutatenMargherita.add(ic);		ic = new IngredientComposite("Sauce");		il = new IngredientLeaf("Rindfleisch");		ic.add(il);		il = new IngredientLeaf("Tomaten");		ic.add(il);		il = new IngredientLeaf("Knoblauch");		ic.add(il);		il = new IngredientLeaf("Oel");		ic.add(il);		zutatenBolognese1.add(ic);		ic = new IngredientComposite("Teig");		il = new IngredientLeaf("Mehl");		ic.add(il);		il = new IngredientLeaf("Salz", 0.01f);		ic.add(il);		il = new IngredientLeaf("Eier");		ic.add(il);		zutatenBolognese1.add(ic);		ic = new IngredientComposite("Sauce");		il = new IngredientLeaf("Rindfleisch");		ic.add(il);		il = new IngredientLeaf("Tomaten");		ic.add(il);		il = new IngredientLeaf("Knoblauch");		ic.add(il);		il = new IngredientLeaf("Oel");		ic.add(il);		zutatenBolognese2.add(ic);		ic = new IngredientComposite("Teig");		il = new IngredientLeaf("Kartoffel", 60f);		ic.add(il);		il = new IngredientLeaf("Salz", 0.01f);		ic.add(il);		il = new IngredientLeaf("Eier");		ic.add(il);		zutatenBolognese2.add(ic);		il = new IngredientLeaf("Zucker", 20f);		zutatenObstsalat.add(il);		il = new IngredientLeaf("Banane", 20f);		zutatenObstsalat.add(il);		il = new IngredientLeaf("Ananas", 20f);		zutatenObstsalat.add(il);		il = new IngredientLeaf("Apfel", 20);		zutatenObstsalat.add(il);		il = new IngredientLeaf("Mango", 20);		zutatenObstsalat.add(il);		dishes.add(new PizzaVO(30, "Margherita", zutatenMargherita, 10.00f, 1));		dishes.add(new PizzaVO(30, "Margherita", zutatenMargherita, 12.90f, 2));		dishes.add(new PastaVO(11, "Bolognese", zutatenBolognese1, 9.60f, 4));		dishes.add(new PastaVO(11, "Bolognese", zutatenBolognese1, 9.60f, 5));		dishes.add(new PastaVO(11, "Bolognese", zutatenBolognese2, 9.60f, 6));		dishes.add(new DessertVO(21, "Hausgemachter Obstsalat", zutatenObstsalat, 8.30f));		myMenu = new MenuVO(dishes);//		System.out.println(myMenu);		menuWriter = new MenuWriter(myMenu);		try {			menuWriter.writeMenu(file, "My little test menu");		} catch (IOException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}	}	@Test	@DisplayName("MenuImporter reads all dishes correctly")	public void testMenuImporterRead() throws FileNotFoundException, IOException {		MenuImporter importer;		importer = new MenuImporter();		readMenu = importer.readMenu(file);		assertTrue(myMenu.getNumberOfDishes() == readMenu.getNumberOfDishes(), "read number of dishes correctly");		for (int i = 0; i < readMenu.getNumberOfDishes(); i++) {				assertEquals(myMenu.getDish(i),readMenu.getDish(i), "read all dishes correctly");		}	}	@Test	@DisplayName("No such file and MenuImporter throws FileNotFoundException")	public void testMenuImporterReadFileNotFoundException() throws IOException {		MenuImporter importer;		importer = new MenuImporter();		Exception exception = Assertions.assertThrows(FileNotFoundException.class,				() -> importer.readMenu("blabla.txt"));		assertTrue(exception.getMessage().contains("blabla.txt"));	}//	@Test//	@DisplayName("MenuImporter reads correctly from corrupted file, i.e. ingredients are missing")//	public void testMenuImporterReadCorruptedFile() throws FileNotFoundException, IOException {////		MenuImporter importer;//		ArrayList<DishVO> dishes = new ArrayList<DishVO>();//		String[] ingredients;//		DessertVO dessert;////		ingredients = new String[] { "Schinken", "Spinat", "Champignon", "Ei" };////		dishes.add(new PizzaVO(30, "Popey", ingredients, 8.50f, 1));////		ingredients = new String[] { "Hackfleisch", "Tomaten", "Parmesan" };////		dishes.add(new PastaVO(13, "Bolognese", ingredients, 6.50f, 4));////		dishes.add(new DessertVO(21, "Hausgemachtes Tiramisu", 4.40f));//		ingredients = new String[] { "Obst", "Mandeln" };//		dessert = new DessertVO(22, "Obstsalat", 4.4f);//		dessert.setIngredients(ingredients);//		dishes.add(dessert);////		importer = new MenuImporter();////		readMenu = importer.readMenu("test/myLittleMenuCorrupted.json");////		for (int i = 0; i < readMenu.getNumberOfDishes(); i++) {//			Assertions.assertEquals(dishes.get(i), readMenu.getDish(i), "Dish read incorrectly");//		}//	}	@Test	@DisplayName("MenuImporter reads correctly from damaged file, i.e. \"dish.nr:\" is  missing and is set 0")	public void testMenuImporterReadDamagedFile() throws FileNotFoundException, IOException {		MenuImporter importer;		importer = new MenuImporter();		JSONException thrown = assertThrows(JSONException.class,				() -> readMenu = importer.readMenu("test/myLittleMenuDamaged.json"));	}	static class MenuWriter {		MenuVO menu;		public MenuWriter(MenuVO menu) {			this.menu = menu;		}		public MenuWriter() {			this(null);		}		public void writeMenu(String fileName, String title) throws IOException, FileNotFoundException {			DishVO currentDish = null;			JSONObject currentJsonDish = null;			JSONObject jsonMenu = new JSONObject();			jsonMenu.put("name", title);			JSONArray jsonDishes = new JSONArray();			for (int i = 0; i < menu.getNumberOfDishes(); ++i) {				currentDish = menu.getDish(i);				currentJsonDish = new JSONObject();				if (currentDish instanceof PizzaVO) {					currentJsonDish.put("type", "Pizza");					currentJsonDish.put("size", ((PizzaVO) currentDish).getSize());				}				if (currentDish instanceof PastaVO) {					currentJsonDish.put("type", "Pasta");					currentJsonDish.put("typeOfPasta", ((PastaVO) currentDish).getTypeOfPasta());				}				if (currentDish instanceof DessertVO) {					currentJsonDish.put("type", "Dessert");				}				currentJsonDish.put("nr", currentDish.getNumber());				currentJsonDish.put("name", currentDish.getName());				currentJsonDish.put("price", currentDish.getPrice());				currentJsonDish.put("timeToMake", currentDish.getTimeToMake());				// ingredients				JSONArray jsonIngredients = new JSONArray();				JSONObject currentIngredient;				for (int j = 0; j < currentDish.getIngredients().size(); ++j) {										currentIngredient =  writeIngredients(jsonIngredients, currentDish.getIngredients().get(j));					jsonIngredients.put(currentIngredient);					currentJsonDish.put("ingredients", jsonIngredients);									}				jsonDishes.put(currentJsonDish);				jsonMenu.put("dishes", jsonDishes);				// String fileText= new String(os.readAllBytes(), StandardCharsets.UTF_8);				Writer w = new FileWriter(new File(file));				jsonMenu.write(w);				w.close();			}		}		private JSONObject writeIngredients(JSONArray jsonIngredients, IngredientComponent currentIngredient) {			JSONObject jSONObjectreturn = new JSONObject();			if (currentIngredient instanceof IngredientLeaf) {				jSONObjectreturn.put("type", "Leaf");				jSONObjectreturn.put("name", currentIngredient.getName());				jSONObjectreturn.put("percentage", currentIngredient.getPercentage());			}			if (currentIngredient instanceof IngredientComposite) {				jSONObjectreturn.put("type", "Composite");				jSONObjectreturn.put("name", currentIngredient.getName());				jSONObjectreturn.put("percentage", currentIngredient.getPercentage());				JSONArray currentJsonIngredientsParts = new JSONArray();				for (int j = 0; j < ((IngredientComposite) currentIngredient).getParts().size(); ++j) {				//	System.out.println(((IngredientComposite) currentIngredient).getParts().get(j));					JSONObject jSONObjectPart = writeIngredients(currentJsonIngredientsParts, ((IngredientComposite) currentIngredient).getParts().get(j));					currentJsonIngredientsParts.put(jSONObjectPart);					}				jSONObjectreturn.put("parts", currentJsonIngredientsParts);				}			return jSONObjectreturn;		}	}}