package de.thb.dim.pizzaProntoTest;import static org.junit.jupiter.api.Assertions.assertEquals;import static org.junit.jupiter.api.Assertions.assertFalse;import static org.junit.jupiter.api.Assertions.assertNotEquals;import static org.junit.jupiter.api.Assertions.assertTrue;import java.lang.reflect.Field;import java.lang.reflect.Method;import java.lang.reflect.Modifier;import java.time.LocalDate;import java.time.LocalTime;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Test;import de.thb.dim.pizzaPronto.valueObjects.DiscountVO;/** *  * @author Gabriele Schmidt * @version 1.0 17.03.2023 */public class JUnitTestDiscountVO {		private static Class<DiscountVO> myDiscountVOClass;	@BeforeEach	public void initEach() {		myDiscountVOClass = DiscountVO.class;	}		@Test	@DisplayName("test DiscountVO has 4 instance attributes")	public void test4Attributes() {				Field[] attributes = myDiscountVOClass.getDeclaredFields();		assertEquals(6, attributes.length);	}		@Test	@DisplayName("test DiscountVO has 13 instance methods")	public void testMethods() {				Method[] methods = myDiscountVOClass.getDeclaredMethods();		assertEquals(13, methods.length);	}		@Test	@DisplayName("test DiscountVO all Methods are public")	public void testMethodsPublic() {				Method[] methods = myDiscountVOClass.getDeclaredMethods();		int modifiersMethods;		for (Method m : methods) {			modifiersMethods = m.getModifiers();			assertTrue(Modifier.isPublic(modifiersMethods));		}	}		@Test	@DisplayName("test DiscountVO implements getDiscountInfo() correctly ")	public void testDiscountVOgetDiscountInfo() {		DiscountVO happyHour = new DiscountVO("Happy Hour", "Each day", null, null, LocalTime.of(17, 0),				LocalTime.of(18, 0));				assertEquals("Happy Hour\n"				+ "Each day from 17:00 to 18:00",happyHour.getDiscountInfo());		DiscountVO pizzaWeek = new DiscountVO("Pizza Week", "Any pizza 10% discount", LocalDate.of(2023, 6, 26),				LocalDate.of(2023, 7, 2), null, null);				assertEquals("Pizza Week\n"				+ "Any pizza 10% discount from 26.06.23 to 02.07.23",pizzaWeek.getDiscountInfo());				DiscountVO pastaTime = new DiscountVO("Pasta Time", "Any pasta 5% discount", LocalDate.of(2023, 7, 13),				LocalDate.of(2023, 7, 16), LocalTime.of(15, 0), LocalTime.of(18, 0));				assertEquals("Pasta Time\n"				+ "Any pasta 5% discount from 13.07.23 to 16.07.23 from 15:00 to 18:00",pastaTime.getDiscountInfo());			DiscountVO lunchTime = new DiscountVO("Lunch Time", "Any dish 5% discount", null,				null, LocalTime.of(11, 0), LocalTime.of(13, 0));				assertEquals("Lunch Time\n"				+ "Any dish 5% discount from 11:00 to 13:00",lunchTime.getDiscountInfo());	}		}