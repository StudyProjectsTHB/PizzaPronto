package de.thb.dim.pizzaProntoTest;import static org.junit.jupiter.api.Assertions.assertEquals;import static org.junit.jupiter.api.Assertions.assertFalse;import static org.junit.jupiter.api.Assertions.assertTrue;import static org.junit.jupiter.api.Assertions.fail;import org.junit.jupiter.api.Assertions;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Test;import de.thb.dim.pizzaPronto.businessObjects.Delivery;import de.thb.dim.pizzaPronto.businessObjects.EmployeeManagement;import de.thb.dim.pizzaPronto.businessObjects.EmployeesAvailabilityState;import de.thb.dim.pizzaPronto.businessObjects.AbstractService;import de.thb.dim.pizzaPronto.businessObjects.Kitchen;import de.thb.dim.pizzaPronto.businessObjects.exceptions.NoCustomerException;import de.thb.dim.pizzaPronto.businessObjects.exceptions.NotEnoughTimeException;import de.thb.dim.pizzaPronto.valueObjects.ChefVO;import de.thb.dim.pizzaPronto.valueObjects.DeliveryManVO;import de.thb.dim.pizzaPronto.valueObjects.EmployeeVO;import de.thb.dim.pizzaPronto.valueObjects.OrderVO;import de.thb.dim.pizzaPronto.valueObjects.exceptions.CustomerTooYoungException;/** * EmployeeVO and work are tested. *  * Requirement: Kitchen, Delivery, ChefVO, DeliveryManVO and EmployeeFactory are ok *  * Special assert statements are used for testing <br> *  * @author Gabriele Schmidt * @version 1.0 07.06.2023 */public class JUnitTestEmployeeManagement {	private static Kitchen kitchen;	private static Delivery delivery;	private static ChefVO chef;	private static DeliveryManVO deliveryManVO;	@BeforeEach	public void initEach() throws NoSuchFieldException, NoSuchMethodException, SecurityException, NullPointerException,			CustomerTooYoungException {		kitchen = new Kitchen();		delivery = new Delivery();		chef = new ChefVO("1", "Bocuse", "Bruno", kitchen);		deliveryManVO = new DeliveryManVO("2", "D", "Driver", delivery);	}	@Test	@DisplayName("test default constructor")	public void testDefaulConstructor() {		EmployeeManagement em = new EmployeeManagement();		assertEquals(EmployeesAvailabilityState.ALLAVAILABLE, em.getState(), "state should be initialized correctly");		try {			assertTrue(em.getCurrentWorkers().isEmpty(), "currentworkers should be empty");		} catch (NullPointerException e) {			fail("currentworkers should not be null");		}	}	@Test	@DisplayName("test hire for kitchen")	public void testHireForKitchen() {		EmployeeManagement em = new EmployeeManagement();		ChefVO chefHired = (ChefVO) em.hire(chef.getPersonnelNo(), chef.getLastName(), chef.getFirstName(), kitchen);		assertEquals(chef, chefHired, "hired object should have be equal given object");		assertEquals(chef.getLastName(), chefHired.getLastName(), "hired object should have same lastname");		assertEquals(chef.getFirstName(), chefHired.getFirstName(), "hired object should have same firstname");		assertEquals(chef.getWorksIn(), chefHired.getWorksIn(), "hired object should know that it works in kitchen");		assertTrue(kitchen.getEmployees().contains(chefHired), "hired object should work in kitchen");		assertEquals(1, em.getCurrentWorkers().size(), "hired object should be in currentworkers");		assertTrue(em.getCurrentWorkers().contains(chefHired), "hired object should be in currentworkers");		assertEquals(EmployeesAvailabilityState.AVAILABLE, em.getState(), "state should be correct");	}	@Test	@DisplayName("test hire for delivery")	public void testHireForDelivery() {		EmployeeManagement em = new EmployeeManagement();		DeliveryManVO deliveryManHired = (DeliveryManVO) em.hire(deliveryManVO.getPersonnelNo(),				deliveryManVO.getLastName(), deliveryManVO.getFirstName(), delivery);		assertEquals(deliveryManVO, deliveryManHired, "hired object should have be equal given object");		assertEquals(deliveryManVO.getLastName(), deliveryManHired.getLastName(),				"hired object should have same lastname");		assertEquals(deliveryManVO.getFirstName(), deliveryManHired.getFirstName(),				"hired object should have same firstname");		assertTrue(delivery.getEmployees().contains(deliveryManHired), "hired object should work in delivery");		assertEquals(deliveryManVO.getWorksIn(), deliveryManHired.getWorksIn(), "hired object should know that it works in delivery");		assertEquals(EmployeesAvailabilityState.AVAILABLE, em.getState(), "state should be correct");		assertEquals(1, em.getCurrentWorkers().size(), "hired object should be in currentworkers");		assertTrue(em.getCurrentWorkers().contains(deliveryManHired), "hired object should be in currentworkers");	}	@Test	@DisplayName("test hire too many")	public void testHiretooMany() {		EmployeeManagement em = new EmployeeManagement();		int i;		for (i = 1; i <= em.getCAPACITY(); i++) {			em.hire(deliveryManVO.getPersonnelNo(), deliveryManVO.getLastName(), deliveryManVO.getFirstName(),					delivery);		}		assertEquals(i - 1, em.getCurrentWorkers().size(), "hired objects should be in currentworkers");		Exception exception = Assertions.assertThrows(IllegalStateException.class,				() -> em.hire("1", "D", "Bruno", kitchen));		assertEquals("All employees are working.", exception.getMessage());		assertEquals(EmployeesAvailabilityState.NOBODYAVAILABLE, em.getState(),				"state should be initialized correctly");	}	@Test	@DisplayName("test fire ChefVO")	public void testFireChefVO() {		EmployeeManagement em = new EmployeeManagement();		assertEquals(2, em.getCAPACITY(), "CAPACITY sholud be 2 at least");		ChefVO chefHired = (ChefVO) em.hire(chef.getPersonnelNo(), chef.getLastName(), chef.getFirstName(), kitchen);		DeliveryManVO deliveryManHired = (DeliveryManVO) em.hire(deliveryManVO.getPersonnelNo(),				deliveryManVO.getLastName(), deliveryManVO.getFirstName(), delivery);		assertEquals(2, em.getCurrentWorkers().size(), "hired objects should be in currentworkers after hireing");		em.fire(chefHired);		assertEquals(1, em.getCurrentWorkers().size(), "fired object should not be in currentworkers after fireing");		assertFalse(em.getCurrentWorkers().contains(chefHired), "fired object should not be in currentworkers");		assertTrue(em.getCurrentWorkers().contains(deliveryManHired), "hired other object should be in currentworkers");		assertEquals(EmployeesAvailabilityState.AVAILABLE, em.getState(), "state should be correct after fireing");		assertFalse(kitchen.getEmployees().contains(chefHired), "fired chef should work in kitchen no longer");	}	@Test	@DisplayName("test fire DeliveryManVO")	public void testFireDeliveryManVO() {		EmployeeManagement em = new EmployeeManagement();		assertEquals(2, em.getCAPACITY(), "CAPACITY sholud be 2 at least");		DeliveryManVO deliveryManHired = (DeliveryManVO) em.hire(deliveryManVO.getPersonnelNo(),				deliveryManVO.getLastName(), deliveryManVO.getFirstName(), delivery);		ChefVO chefHired = (ChefVO) em.hire(chef.getPersonnelNo(), chef.getLastName(), chef.getFirstName(), kitchen);		assertEquals(2, em.getCurrentWorkers().size(), "hired object should be in currentworkers after hireing");		em.fire(deliveryManHired);		assertEquals(1, em.getCurrentWorkers().size(), "fired object should not be in currentworkers after fireing");		assertFalse(delivery.getEmployees().contains(deliveryManHired), "fired deliveryMan should work in delivery no longer");		assertEquals(EmployeesAvailabilityState.AVAILABLE, em.getState(), "state should be correct after fireing");	}	@Test	@DisplayName("test fire wrong employee")	public void testFireWrongEmployee() {		EmployeeManagement em = new EmployeeManagement();		assertEquals(2, em.getCAPACITY(), "CAPACITY sholud be 2 at least");		DeliveryManVO deliveryManHired = (DeliveryManVO) em.hire(deliveryManVO.getPersonnelNo(),				deliveryManVO.getLastName(), deliveryManVO.getFirstName(), delivery);		ChefVO chefHired = (ChefVO) em.hire(chef.getPersonnelNo(), chef.getLastName(), chef.getFirstName(), kitchen);		assertEquals(2, em.getCurrentWorkers().size(), "hired objects should be in currentworkers after hireing");		em.fire(new ChefVO("3", "Bocuse2", "Bruno2", kitchen));		assertEquals(2, em.getCurrentWorkers().size(), "fired object should be in currentworkers after fireing");	}	@Test	@DisplayName("test fire too many")	public void testFiretooMany() {		EmployeeManagement em = new EmployeeManagement();		int i;		for (i = 1; i <= em.getCAPACITY(); i++) {			em.hire(deliveryManVO.getPersonnelNo(), deliveryManVO.getLastName(), deliveryManVO.getFirstName(),					delivery);		}		assertEquals(i - 1, em.getCurrentWorkers().size(), "hired objects should be in currentworkers");		for (i = 0; i < em.getCAPACITY(); i++) {			em.fire(deliveryManVO);		}		Exception exception = Assertions.assertThrows(IllegalStateException.class, () -> em.fire(chef));		assertEquals("No employees are working.", exception.getMessage());		assertEquals(EmployeesAvailabilityState.ALLAVAILABLE, em.getState(), "state should be initialized correctly");	}	@Test	@DisplayName("test hire with wrong IService")	public void testWrongIService() {		EmployeeManagement em = new EmployeeManagement();		WaiterVO w = new WaiterVO();		Exception exception = Assertions.assertThrows(IllegalArgumentException.class,				() -> em.hire("1", "D", "Bruno", w));		assertEquals("Wrong service.", exception.getMessage());	}		//New Service which is not integrated yet	private class WaiterVO extends AbstractService {		@Override		public String startService(OrderVO order)				throws NoCustomerException, IllegalStateException, NullPointerException, NotEnoughTimeException {			// TODO Auto-generated method stub			return null;		}		@Override		public void addEmployee(EmployeeVO employee) {			// TODO Auto-generated method stub		}		@Override		public void removeEmployee(EmployeeVO employee) {			// TODO Auto-generated method stub		}		@Override		public void removeEmployee(String persNr) {			// TODO Auto-generated method stub		}			}}