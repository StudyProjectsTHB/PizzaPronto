package de.thb.dim.pizzaProntoTest;import static org.junit.jupiter.api.Assertions.assertFalse;import static org.junit.jupiter.api.Assertions.assertNotEquals;import static org.junit.jupiter.api.Assertions.assertEquals;import static org.junit.jupiter.api.Assertions.assertTrue;import java.lang.reflect.Field;import java.lang.reflect.Modifier;import java.time.LocalTime;import org.junit.jupiter.api.BeforeAll;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Test;import de.thb.dim.pizzaPronto.businessObjects.DiscountManagement;import de.thb.dim.pizzaPronto.businessObjects.Observable;import de.thb.dim.pizzaPronto.valueObjects.DiscountVO;/** *  * Requirement: DiscountVO is ok *  * Special assert statements are used for testing <br> *  * @author Gabriele Schmidt * @version 1.0 07.06.2023 */public class JUnitTestDiscountManagement {	private static Class<DiscountManagement> myDiscountManagement;	private static DiscountVO myDiscount;		private static Field discounts;		private static DiscountManagement dm ;			@BeforeAll	public static void initOnce() throws NoSuchFieldException, SecurityException {		myDiscountManagement = DiscountManagement.class;		discounts = myDiscountManagement.getDeclaredField("discounts");			}		@BeforeEach	public void initEach() throws NullPointerException {		// create order		dm = new DiscountManagement();		myDiscount = new DiscountVO("Lunch Time", "Any dish 5% discount", null,				null, LocalTime.of(11, 0), LocalTime.of(13, 0));	}	@Test	@DisplayName("test DiscountManagement is Observable")	public void testDiscountManagementIsObservable() {			assertTrue(dm instanceof Observable);	}		@Test	@DisplayName("test DiscountManagement default Constructor initializes discounts")	public void testDiscountManagementConstructor() {			assertNotEquals(null,dm.getDiscounts());	}		@Test	@DisplayName("test DiscountManagement information hiding principle (Geheimnisprinzip): All Attributes are private")	public void testDiscountManagementAttributesPrivate() {		Field[] attributes = myDiscountManagement.getDeclaredFields();		int modifiersAttributes;		for (Field f : attributes) {			modifiersAttributes = f.getModifiers();			assertTrue(Modifier.isPrivate(modifiersAttributes));		}	}		@Test	@DisplayName("test DiscountManagement  Class has 1 attributes")	public void testDiscountManagementAttributes() {		Field[] attributes = myDiscountManagement.getDeclaredFields();		assertEquals(1, attributes.length);	}		@Test	@DisplayName("test DiscountManagement datatype of discounts is interface java.util.List")	public void testDiscountManagementDiscountsDataType() {			assertTrue(discounts.getType().toString().equals("interface java.util.List"),				"discounts in DiscountManagement is a list of type DiscountVO");	}		@Test	@DisplayName("test DiscountManagement add")	public void testDiscountManagementaddMethod() {		// add one discount		dm.add(myDiscount);		assertEquals(1, dm.getDiscounts().size(), "Number of discouts in DiscountManagement should be 1");		assertTrue(dm.getDiscounts().contains(myDiscount), "discouts should contain the object ");	}	@Test	@DisplayName("test DiscountManagement add many discounts")	public void testDiscountManagementaddMany() {				// add many discounts		for (int i = 0; i < 10; i++) {					dm.add(myDiscount);				}		assertEquals(10, dm.getDiscounts().size(), "Number of discouts in DiscountManagement should be 10");		assertTrue(dm.getDiscounts().contains(myDiscount), "discouts should contain the object ");	}	@Test	@DisplayName("test DiscountManagement delete")	public void testDiscountManagementdelete() {		// add one discount				dm.add(myDiscount);				assertEquals(1, dm.getDiscounts().size(), "Number of discouts in DiscountManagement should be 1");				assertTrue(dm.getDiscounts().contains(myDiscount), "discouts should contain the object ");				// add one discount				dm.delete(myDiscount);				assertEquals(0, dm.getDiscounts().size(), "Number of discouts in DiscountManagement should be 0 after deleting");				assertFalse(dm.getDiscounts().contains(myDiscount), "discouts should not contain the object after deleting");	}		@Test	@DisplayName("test DiscountManagement toString")	public void testDiscountManagementToString() {		dm.add(myDiscount);		String s = dm.toString();		assertEquals("Discount Overview\n***Lunch Time\nAny dish 5% discount from 11:00 to 13:00\n",s);	}}