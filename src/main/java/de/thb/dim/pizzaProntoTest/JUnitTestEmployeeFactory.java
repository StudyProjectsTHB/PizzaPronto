package de.thb.dim.pizzaProntoTest;import static org.junit.jupiter.api.Assertions.assertEquals;import static org.junit.jupiter.api.Assertions.assertTrue;import java.lang.reflect.Method;import java.lang.reflect.Modifier;import org.junit.jupiter.api.Assertions;import org.junit.jupiter.api.BeforeAll;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Test;import de.thb.dim.pizzaPronto.businessObjects.AbstractService;import de.thb.dim.pizzaPronto.businessObjects.Delivery;import de.thb.dim.pizzaPronto.businessObjects.Kitchen;import de.thb.dim.pizzaPronto.businessObjects.exceptions.NoCustomerException;import de.thb.dim.pizzaPronto.businessObjects.exceptions.NotEnoughTimeException;import de.thb.dim.pizzaPronto.controller.EmployeeFactory;import de.thb.dim.pizzaPronto.controller.IEmployeeFactory;import de.thb.dim.pizzaPronto.valueObjects.ChefVO;import de.thb.dim.pizzaPronto.valueObjects.DeliveryManVO;import de.thb.dim.pizzaPronto.valueObjects.EmployeeVO;import de.thb.dim.pizzaPronto.valueObjects.OrderVO;/** * The Hierarchy of inheritance is tested. *  * Special assert statements are used for testing <br> *  * @author Gabriele Schmidt * @version 1.0 07.06.2023 */public class JUnitTestEmployeeFactory {				private static Class<IEmployeeFactory> myIEmployeeFactory;	private static int modifiersIEmployeeFactory; 	private static  Kitchen kitchen;	private static  Delivery delivery;	private static Class<EmployeeFactory> myEmployeeFactory;			@BeforeAll	public static void initOnce() throws NoSuchFieldException, SecurityException, NoSuchMethodException{				myIEmployeeFactory = IEmployeeFactory.class;		modifiersIEmployeeFactory= myIEmployeeFactory.getModifiers();				myEmployeeFactory = EmployeeFactory.class;				kitchen = new Kitchen();		delivery = new Delivery();			}	@Test	@DisplayName("test interface")	public void testInterface() {		assertTrue( Modifier.isInterface(modifiersIEmployeeFactory),"IEmployeeFactory should be interface");	}		@Test	@DisplayName("test method of interface")	public void testMethodOfInterface() {		Method[] methods = myIEmployeeFactory.getDeclaredMethods();		boolean createMethod = false;		for (Method m : methods) {			if (m.toString().equals(					"public abstract de.thb.dim.pizzaPronto.valueObjects.EmployeeVO de.thb.dim.pizzaPronto.controller.IEmployeeFactory.create(java.lang.String,java.lang.String,java.lang.String,de.thb.dim.pizzaPronto.businessObjects.IService) throws java.lang.IllegalArgumentException")) {				createMethod = true;			}		}			assertTrue(createMethod, "method of interface should be create");			}			@Test	@DisplayName("test EmployeeFactory implements IEmployeeFactory")	public void testEmployeeFactorySuperType() {		assertTrue(myEmployeeFactory.getInterfaces()[0].toString().equals("interface de.thb.dim.pizzaPronto.controller.IEmployeeFactory"),"EmployeeFactory should implement IEmployeeFactory");	}		@Test	@DisplayName("test create ChefVO if service is kitchen")	public void testCreateChefVO() {		EmployeeFactory ef = new EmployeeFactory();		assertTrue(ef.create(null, null, null, kitchen) instanceof ChefVO, "an object of ChefVO should be created");	}		@Test	@DisplayName("test create a correct object of ChefVO")	public void testCreateChefVOObject() {		EmployeeFactory ef = new EmployeeFactory();		ChefVO c = new ChefVO("1", "Bocuse","Bruno",kitchen);		ChefVO created = (ChefVO) ef.create("1", "Bocuse","Bruno",kitchen);		assertEquals(c,created, "created object should have be equal given object");		assertEquals(c.getLastName(),created.getLastName(), "created object should have same lastname");		assertEquals(c.getFirstName(),created.getFirstName(), "created object should have same firstname");		assertEquals(c.getWorksIn(),created.getWorksIn(), "created object should work in kitchen");	}		@Test	@DisplayName("test create a correct obejct of ChefVO")	public void testCreateDeliveryManVOObject() {		EmployeeFactory ef = new EmployeeFactory();		DeliveryManVO c = new DeliveryManVO("2", "D","Bruno",delivery);		DeliveryManVO created = (DeliveryManVO) ef.create("2", "D","Bruno",delivery);		assertEquals(c,created, "created object should have be equal given object");		assertEquals(c.getLastName(),created.getLastName(), "created object should have same lastname");		assertEquals(c.getFirstName(),created.getFirstName(), "created object should have same firstname");		assertEquals(c.getWorksIn(),created.getWorksIn(), "created object should work in kitchen");	}		@Test	@DisplayName("test wrong IService")	public void testWrongIService() {	   		EmployeeFactory ef = new EmployeeFactory();		WaiterVO w = new WaiterVO();				Exception exception = Assertions.assertThrows(IllegalArgumentException.class,				() -> ef.create("1", "D","Bruno",w));		assertEquals("Wrong service.", exception.getMessage());	}		private class WaiterVO extends AbstractService{		@Override		public String startService(OrderVO order)				throws NoCustomerException, IllegalStateException, NullPointerException, NotEnoughTimeException {			// TODO Auto-generated method stub			return null;		}		@Override		public void addEmployee(EmployeeVO employee) {			// TODO Auto-generated method stub					}		@Override		public void removeEmployee(EmployeeVO employee) {			// TODO Auto-generated method stub					}		@Override		public void removeEmployee(String persNr) {			// TODO Auto-generated method stub					}			}}