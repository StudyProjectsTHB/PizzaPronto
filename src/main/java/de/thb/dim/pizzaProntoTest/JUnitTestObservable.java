package de.thb.dim.pizzaProntoTest;import static org.junit.jupiter.api.Assertions.assertEquals;import static org.junit.jupiter.api.Assertions.assertFalse;import static org.junit.jupiter.api.Assertions.assertTrue;import static org.junit.jupiter.api.Assertions.fail;import java.lang.reflect.Modifier;import java.lang.reflect.Field;import java.lang.reflect.Method;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Test;import de.thb.dim.pizzaPronto.businessObjects.IObservable;import de.thb.dim.pizzaPronto.businessObjects.Observable;import de.thb.dim.pizzaPronto.valueObjects.IObserver;/** *  * @author Gabriele Schmidt * @version 1.0 8.06.2023 */public class JUnitTestObservable {			private static Class<Observable> myObservable;	private static int modifiersObservable; 			@BeforeEach	public void initEach() {		myObservable = Observable.class;		modifiersObservable= myObservable.getModifiers();	}	@Test	@DisplayName("test Observable is abstract")	public void testObservableisInterface() {			assertTrue( Modifier.isAbstract(modifiersObservable),"Observable is abstract");	}		@Test	@DisplayName("test Observable has 5 methods")	public void testObservableMethods() {		Method[] methods = myObservable.getDeclaredMethods();		assertEquals(5,methods.length);	}		@Test	@DisplayName("test Observable has field obervers")	public void testObservableFields() {		Field[] fields = myObservable.getDeclaredFields();		assertEquals(1,fields.length);	}		@Test	@DisplayName("test Observable has method attach")	public void testObservableHasAttach() {		Method method;		try {			method = myObservable.getMethod("attach",de.thb.dim.pizzaPronto.valueObjects.IObserver.class);			} catch (NoSuchMethodException | SecurityException e) {			fail("No such method " + e.getMessage());		}	}	@Test	@DisplayName("test Observable has method detach")	public void testObservableHasDetach() {		Method method;		try {			method = myObservable.getMethod("detach",de.thb.dim.pizzaPronto.valueObjects.IObserver.class);			} catch (NoSuchMethodException | SecurityException e) {			fail("No such method " + e.getMessage());		}	}		@Test	@DisplayName("test Observable has method notify")	public void testObservableHasNotify() {		Method method;		try {			method = myObservable.getMethod("notify",IObservable.class,java.lang.String.class);			} catch (NoSuchMethodException | SecurityException e) {			fail("No such method " + e.getMessage());		}	}		@Test	@DisplayName("test Observable implements method attach")	public void testObservableImplementsAttach() {		IObservable myObservable = new MyObservable();		IObserver myObserver = new MyObserver();		myObservable.attach(myObserver);		assertTrue(((Observable) myObservable).getObservers().contains(myObserver));	}	@Test	@DisplayName("test Observable implements method detach")	public void testObservableImplementsDetach() {		IObservable myObservable = new MyObservable();		IObserver myObserver1 = new MyObserver();		IObserver myObserver2 = new MyObserver();		myObservable.attach(myObserver1);		myObservable.attach(myObserver2);		assertTrue(((Observable) myObservable).getObservers().contains(myObserver1));		assertTrue(((Observable) myObservable).getObservers().contains(myObserver2));		myObservable.detach(myObserver1);		assertFalse(((Observable) myObservable).getObservers().contains(myObserver1));		assertTrue(((Observable) myObservable).getObservers().contains(myObserver2));	}	@Test	@DisplayName("test Observable implements method notify")	public void testObservableImplementsNotify() {		String msg = "test";		IObservable myObservable = new MyObservable();		IObserver myObserver1 = new MyObserver();		IObserver myObserver2 = new MyObserver();		myObservable.attach(myObserver1);		myObservable.attach(myObserver2);		assertTrue(((Observable) myObservable).getObservers().contains(myObserver1));		assertTrue(((Observable) myObservable).getObservers().contains(myObserver2));		myObservable.notify(myObservable, msg);		assertEquals(msg,((MyObserver)myObserver1).getMessage());		assertTrue(myObservable == ((MyObserver)myObserver1).getObservable());		assertEquals(msg,((MyObserver)myObserver2).getMessage());		assertTrue(myObservable == ((MyObserver)myObserver2).getObservable());	}			private class MyObservable extends Observable{		}		private class MyObserver implements IObserver{				IObservable observable;		String message;		@Override		public void update(IObservable observable, String s) {			setObservable(observable);			setMessage(s);		}		public IObservable getObservable() {			return observable;		}		public void setObservable(IObservable observable) {			this.observable = observable;		}		public String getMessage() {			return message;		}		public void setMessage(String s) {			this.message = s;		}			}}