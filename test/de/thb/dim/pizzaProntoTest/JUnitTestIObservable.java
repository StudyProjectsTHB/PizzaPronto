package de.thb.dim.pizzaProntoTest;import static org.junit.jupiter.api.Assertions.assertEquals;import static org.junit.jupiter.api.Assertions.assertTrue;import static org.junit.jupiter.api.Assertions.fail;import java.lang.reflect.Modifier;import java.lang.reflect.Method;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Test;import de.thb.dim.pizzaPronto.businessObjects.IObservable;/** *  * @author Gabriele Schmidt * @version 1.0 8.06.2023 */public class JUnitTestIObservable {			private static Class<IObservable> myIObservable;	private static int modifiersIObservable; 			@BeforeEach	public void initEach() {		myIObservable = IObservable.class;		modifiersIObservable= myIObservable.getModifiers();	}	@Test	@DisplayName("test IObservable is Interface")	public void testIObservableisInterface() {			assertTrue( Modifier.isInterface(modifiersIObservable),"IObservable is Interface");	}		@Test	@DisplayName("test IObservable has 3 methods")	public void testIObservableMethods() {		Method[] methods = myIObservable.getDeclaredMethods();		assertEquals(3,methods.length);	}		@Test	@DisplayName("test IObservable has method attach")	public void testIObservableAttach() {		Method method;		try {			method = myIObservable.getMethod("attach",de.thb.dim.pizzaPronto.valueObjects.IObserver.class);			} catch (NoSuchMethodException | SecurityException e) {			fail("No such method " + e.getMessage());		}	}	@Test	@DisplayName("test IObservable has method detach")	public void testIObservableDetach() {		Method method;		try {			method = myIObservable.getMethod("detach",de.thb.dim.pizzaPronto.valueObjects.IObserver.class);			} catch (NoSuchMethodException | SecurityException e) {			fail("No such method " + e.getMessage());		}	}		@Test	@DisplayName("test IObservable has method notify")	public void testIObservableNotify() {		Method method;		try {			method = myIObservable.getMethod("notify",IObservable.class,java.lang.String.class);			} catch (NoSuchMethodException | SecurityException e) {			fail("No such method " + e.getMessage());		}	}}