package de.thb.dim.pizzaProntoTest;import static org.junit.jupiter.api.Assertions.assertEquals;import static org.junit.jupiter.api.Assertions.assertFalse;import static org.junit.jupiter.api.Assertions.assertNotEquals;import static org.junit.jupiter.api.Assertions.assertTrue;import static org.junit.jupiter.api.Assertions.fail;import java.lang.reflect.Field;import java.lang.reflect.Method;import java.lang.reflect.Modifier;import java.util.ArrayList;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Test;import de.thb.dim.pizzaPronto.valueObjects.DessertVO;import de.thb.dim.pizzaPronto.valueObjects.DishVO;import de.thb.dim.pizzaPronto.valueObjects.IngredientComponent;import de.thb.dim.pizzaPronto.valueObjects.IngredientComposite;import de.thb.dim.pizzaPronto.valueObjects.IngredientLeaf;import de.thb.dim.pizzaPronto.valueObjects.PastaVO;import de.thb.dim.pizzaPronto.valueObjects.PizzaVO;/** * DishVO, PastaVO, PizzaVO and Dessert are tested. *  * Special assert statements are used for testing <br> *  * @author Gabriele Schmidt * @version 1.0 12.06.2023 */public class JUnitTestIngredient {		private static Class<IngredientComponent> myIngredientComponentClass;	private static Class<IngredientLeaf> myIngredientLeafClass;	private static Class<IngredientComposite> myIngredientCompositeClass;	@BeforeEach	public void initEach() {		myIngredientComponentClass = IngredientComponent.class;		myIngredientLeafClass = IngredientLeaf.class;		myIngredientCompositeClass = IngredientComposite.class;	}		//IngredientComponent	@Test	@DisplayName("test IngredientComponent is serializable")	public void testIngredientComponentSerializable() {		boolean serialVersionUIDIsThere = false;		Field[] attributes = myIngredientComponentClass.getDeclaredFields();		for(Field f:  attributes)			if(f.toString().equals("private static final long de.thb.dim.pizzaPronto.valueObjects.IngredientComponent.serialVersionUID"))				serialVersionUIDIsThere = true;		assertTrue(serialVersionUIDIsThere, "Attribute \"private static final long serialVersionUID = 1L;\2 ist missing");				StringBuilder sb = new StringBuilder();		Class<?> interfaces [] = myIngredientComponentClass.getInterfaces();				for(Class<?> i : interfaces) {			sb.append(i.toString());		}		assertTrue(sb.toString().contains("interface java.io.Serializable"),"IngredientComponent should implement interface \"java.io.Serializable\"");	}		@Test	@DisplayName("test IngredientComponent has 3  attributes")	public void testIngredientComponentAttributes() {						Field[] attributes = myIngredientComponentClass.getDeclaredFields();						assertEquals(3, attributes.length,"IngredientComponent should have 3  attributes.");	}		@Test	@DisplayName("test IngredientComponent has 5 instance methods")	public void testIngredientComponentMethods() {				Method[] methods = myIngredientComponentClass.getDeclaredMethods();		assertEquals(5, methods.length);	}		@Test	@DisplayName("test all methods of IngredientComponent are public")	public void testIngredientComponentMethodsPublic() {				Method[] methods = myIngredientComponentClass.getDeclaredMethods();		int modifiersMethods;		for (Method m : methods) {			modifiersMethods = m.getModifiers();			assertTrue(Modifier.isPublic(modifiersMethods));		}	}		@Test	@DisplayName("test toString of IngredientComponent is abstract")	public void testIngredientComponentMethodToStringAbstract() {				Method method;		try {			method = myIngredientComponentClass.getMethod("toString");			int modifiersMethods = method.getModifiers();			assertTrue(Modifier.isAbstract(modifiersMethods));		} catch (NoSuchMethodException | SecurityException e) {			// TODO Auto-generated catch block			fail("method toString is missing");		}			}		//IngredientLeaf			@Test	@DisplayName("test IngredientLeaf has only toString as method besides constructors")	public void testIngredientLeafMethods() {				Method[] methods = myIngredientLeafClass.getDeclaredMethods();		assertEquals(1, methods.length);	}				@Test	@DisplayName("test all methods of IngredientLeaf are public")	public void testIngredientLeafMethodsPublic() {				Method[] methods = myIngredientLeafClass.getDeclaredMethods();		int modifiersMethods;		for (Method m : methods) {			modifiersMethods = m.getModifiers();			assertTrue(Modifier.isPublic(modifiersMethods));		}	}		@Test	@DisplayName("test toString of myIngredientLeaf is not abstract")	public void testIngredientLeafMethodToStringNotAbstract() {				Method method;		try {			method = myIngredientLeafClass.getMethod("toString");			int modifiersMethods = method.getModifiers();			assertTrue(!Modifier.isAbstract(modifiersMethods));		} catch (NoSuchMethodException | SecurityException e) {			// TODO Auto-generated catch block			fail("method toString is missing");		}			}		@Test	@DisplayName("test IngredientLeaf has super class IngredientComponent")	public void testIngredientLeafSuperIngredientComponent() {		IngredientLeaf il;		il = new IngredientLeaf("Kaese");		assertTrue(il instanceof IngredientComponent);	}		@Test	@DisplayName("test IngredientLeaf name and percentage with initalisation constructor and getter")	public void testIngredientLeafAttributesIni() {		String name = "tttt";		float percentage = 2.2f;		IngredientLeaf il;		il = new IngredientLeaf(name,percentage);		assertEquals(name, il.getName(), "Name is not ok");		assertEquals(percentage, il.getPercentage(), "Name is not ok");	}		@Test	@DisplayName("test IngredientLeaf name and percentage with default constructor, setter and getter")	public void testIngredientLeafAttributesIniSetter() {		String name = "tttt";		float percentage = 2.2f;		IngredientLeaf il;		il = new IngredientLeaf();		il.setName(name);		il.setPercentage(percentage);		assertEquals(name, il.getName(), "Name is not ok");		assertEquals(percentage, il.getPercentage(), "Name is not ok");	}			//IngredientComposite	@Test	@DisplayName("test IngredientComposite has 1  attribute")	public void testIngredientCompositeAttributes() {						Field[] attributes = myIngredientCompositeClass.getDeclaredFields();		assertEquals(1, attributes.length,"IngredientComponent should have 1  attributes.");	}		@Test	@DisplayName("test IngredientComposite has 5 methods")	public void testIngredientCompositeMethods() {				Method[] methods = myIngredientCompositeClass.getDeclaredMethods();		assertEquals(6, methods.length);	}				@Test	@DisplayName("test all methods of IngredientComposite are public")	public void testIngredientCompositeMethodsPublic() {				Method[] methods = myIngredientCompositeClass.getDeclaredMethods();		int modifiersMethods;		for (Method m : methods) {			modifiersMethods = m.getModifiers();			assertTrue(Modifier.isPublic(modifiersMethods));		}	}		@Test	@DisplayName("test toString of IngredientComposite is not abstract")	public void testIngredientCompositeMethodToStringNotAbstract() {				Method method;		try {			method = myIngredientCompositeClass.getMethod("toString");			int modifiersMethods = method.getModifiers();			assertTrue(!Modifier.isAbstract(modifiersMethods));		} catch (NoSuchMethodException | SecurityException e) {			// TODO Auto-generated catch block			fail("method toString is missing");		}			}		@Test	@DisplayName("test IngredientComposite has super class IngredientComponent")	public void testIngredientCompositeSuperIngredientComponent() {		IngredientComposite ic;		ic = new IngredientComposite("Kaese");		assertTrue(ic instanceof IngredientComponent);	}		@Test	@DisplayName("test IngredientComposite name and percentage with initalisation constructor and getter")	public void testIngredientCompositeAttributesIni() {		String name = "tttt";		float percentage = 2.2f;		IngredientComposite ic;		ic = new IngredientComposite(name,percentage);		assertEquals(name, ic.getName(), "Name is not ok");		assertEquals(percentage, ic.getPercentage(), "Name is not ok");	}		@Test	@DisplayName("test IngredientComposite name and percentage with default constructor, setter and getter")	public void testIngredientCompositeAttributesIniSetter() {		String name = "tttt";		float percentage = 2.2f;		IngredientComposite ic;		ic = new IngredientComposite();		ic.setName(name);		ic.setPercentage(percentage);		assertEquals(name, ic.getName(), "Name is not ok");		assertEquals(percentage, ic.getPercentage(), "Name is not ok");	}		@Test	@DisplayName("test IngredientComposite add and remove ingredients as parts")	public void testIngredientCompositeAddRemove() {				IngredientLeaf ils [] = new IngredientLeaf[4];		IngredientComposite ic;				ic = new IngredientComposite("Belag");		ils[0] = new IngredientLeaf("Kaese");		ic.add(ils[0]);		ils[1] = new IngredientLeaf("Basillikum");		ic.add(ils[1]);		ils[2] = new IngredientLeaf("Knoblauch");		ic.add(ils[2]);		ils[3] = new IngredientLeaf("Oel");		ic.add(ils[3]);		assertEquals(4,ic.getParts().size(),"all ingredients should be add as parts");		for(IngredientLeaf il : ils) {			assertTrue(ic.getParts().contains(il),"all element should be add as parts");		}				ic.remove(ils[1]);		assertEquals(3,ic.getParts().size(),"a ingredients should be removed from parts");		assertFalse(ic.getParts().contains(ils[1]),"all element should be add as parts");	}		@Test	@DisplayName("test IngredientComposite toString Format")	public void testIngredientCompositeToStringFormat() {				IngredientLeaf il;		IngredientComposite ic;				ic = new IngredientComposite("Belag");		il = new IngredientLeaf("Kaese");		ic.add(il);		il = new IngredientLeaf("Basillikum");		ic.add(il);		il = new IngredientLeaf("Knoblauch");		ic.add(il);		il = new IngredientLeaf("Oel");		ic.add(il);		assertEquals("Belag (Kaese, Basillikum, Knoblauch, Oel)",ic.toString(),"Format should be for example \"Teig (Mehl, Eier, Salz)\" ");						ic = new IngredientComposite("B");		il = new IngredientLeaf("K");		ic.add(il);		il = new IngredientLeaf("B");		ic.add(il);		il = new IngredientLeaf("K");		ic.add(il);		il = new IngredientLeaf("O");		ic.add(il);		assertTrue("B (K, B, K, O)".equals(ic.toString()),"Format should be for example \"Teig (Mehl, Eier, Salz)\" ");	}		@Test	@DisplayName("test IngredientComposite toString Format: Beispiel: \"Teig (Mehl, Eier, Salz)\"")	public void testIngredientCompositeToStringFormatTeig() {				IngredientLeaf il;		IngredientComposite ic;				ic = new IngredientComposite("Teig");		il = new IngredientLeaf("Mehl");		ic.add(il);		il = new IngredientLeaf("Eier");		ic.add(il);		il = new IngredientLeaf("Salz");		ic.add(il);		assertEquals("Teig (Mehl, Eier, Salz)",ic.toString(),"Format should be for example \"Teig (Mehl, Eier, Salz)\" ");	}		@Test	@DisplayName("test IngredientComposite toString Format: Beispiel: \"60,00% Teig (Mehl, Eier, Salz)\"")	public void testIngredientCompositeToStringFormatTeigPercentage() {				IngredientLeaf il;		IngredientComposite ic;				ic = new IngredientComposite("Teig",60f);		il = new IngredientLeaf("Mehl");		ic.add(il);		il = new IngredientLeaf("Eier");		ic.add(il);		il = new IngredientLeaf("Salz");		ic.add(il);		assertEquals("60,00% Teig (Mehl, Eier, Salz)",ic.toString(),"Format should be for example \"Teig (Mehl, Eier, Salz)\" ");	}	@Test	@DisplayName("test IngredientComposite toString recursive")	public void testIngredientCompositeToStringFormatRecursiveI() {				IngredientLeaf il;		IngredientComposite ic1,ic2;				ic1 = new IngredientComposite("Tomatensauce",30.5f);		ic2 = new IngredientComposite("Gewuerze");		il = new IngredientLeaf("Tomaten");		ic1.add(il);		il = new IngredientLeaf("Wasser",80.f);		ic1.add(il);		il = new IngredientLeaf("Salz",0.5f);		ic2.add(il);		il = new IngredientLeaf("Basilikum");		ic2.add(il);		il = new IngredientLeaf("Geschmacksverstaerker",0.5f);		ic2.add(il);		ic1.add(ic2);		assertEquals("30,50% Tomatensauce (Tomaten, 80,00% Wasser, Gewuerze (0,50% Salz, Basilikum, 0,50% Geschmacksverstaerker))",ic1.toString(),"Format should be for example \"Teig (Mehl, Eier, Salz)\" ");	}		@Test	@DisplayName("test IngredientComposite toString recursive")	public void testIngredientCompositeToStringFormatRecursiveII() {				IngredientLeaf il;		IngredientComposite ic1,ic2;				ic1 = new IngredientComposite("Tomatensauce",30.5f);		ic2 = new IngredientComposite("Gewuerze");		il = new IngredientLeaf("Tomaten");		ic1.add(il);		il = new IngredientLeaf("Wasser",80.f);		ic1.add(il);		il = new IngredientLeaf("Salz",0.5f);		ic2.add(il);		il = new IngredientLeaf("Basilikum");		ic2.add(il);		il = new IngredientLeaf("Rosmarien");		ic2.add(il);		ic1.add(ic2);		assertEquals("30,50% Tomatensauce (Tomaten, 80,00% Wasser, Gewuerze (0,50% Salz, Basilikum, Rosmarien))",ic1.toString(),"Format should be for example \"Teig (Mehl, Eier, Salz)\" ");	}	@Test	@DisplayName("test IngredientLeaf as Leaf with percentage, example \"15,00% Kaese\" ")	public void testIngredientLeafToString() {			IngredientLeaf il;			il = new IngredientLeaf("Kaese",15.00f);				assertEquals("15,00% Kaese",il.toString(),"Format should be for example  \"15,00% Kaese\" ");			}		}